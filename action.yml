name: 'QUIC Interop Runner Action'
description: ''
author: 'mxinden'
branding:
  icon: 'anchor'
  color: 'blue'

inputs:
  image-name:
    description: ''
    required: true


# Cache key for caching the Wireshark build.
# To trigger a rebuild of Wireshark increment this value.
# The rebuild will then build the current master of Wireshark and save it under the new key.
env:
  WIRESHARK_CACHEKEY: 7

runs:
  using: "composite"
  steps:
    - name: Checkout quic-interop/quic-interop-runner repository
      uses: actions/checkout@v2
      with:
        repository: 'quic-interop/quic-interop-runner'
        path: 'quic-interop-runner'

    # Wireshark
    - name: Restore from cache
      id: restore-cache
      uses: actions/cache@v3
      env:
        VERSION: ${{ env.WIRESHARK_CACHEKEY }}
      with:
        key: wireshark-${{ env.VERSION }}
        path: tshark.tar.gz
    - name: Show tshark version information
      if: steps.restore-cache.outputs.cache-hit == 'true'
      run: |
        tar xfz tshark.tar.gz
        ./tshark -v
      shell: bash
    - uses: actions/checkout@v3
      if: steps.restore-cache.outputs.cache-hit != 'true'
      with:
        repository: the-tcpdump-group/libpcap
    - name: Build libpcap
      if: steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        ./autogen.sh
        ./configure --disable-dbus --disable-rdma
        sudo make install
      shell: bash
    - uses: actions/checkout@v3
      if: steps.restore-cache.outputs.cache-hit != 'true'
      with:
        repository: wireshark/wireshark
    - name: Install dependencies
      if: steps.restore-cache.outputs.cache-hit != 'true'
      run: sudo apt-get install -y cmake libglib2.0-dev libc-ares-dev libgcrypt20-dev flex bison byacc ninja-build
      shell: bash
    - name: Build Wireshark
      if: steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        cmake -GNinja -DBUILD_wireshark=0 -DBUILD_qtshark=0 -DBUILD_editcap=0 -DBUILD_capinfos=0 -DBUILD_text2pcap=0 -DBUILD_rawshark=0 -DBUILD_sdjournal=0 -DBUILD_sshdump=0 -DBUILD_ciscodump=0 -DBUILD_sharkd=0 -DENABLE_STATIC=1 -DENABLE_PLUGINS=0 -DENABLE_LIBXML2=0 -DENABLE_BROTLI=0 -DUSE_STATIC=1 -DENABLE_GNUTLS=1 .
        ninja
      shell: bash
    - run: run/tshark -v
      shell: bash
      if: steps.restore-cache.outputs.cache-hit != 'true'

    # Run tests
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Enable IPv6 support
      run: sudo modprobe ip6table_filter
      shell: bash
    - run: docker image ls
      shell: bash
    - name: Download tools Docker images
      uses: actions/download-artifact@v3
      with:
        name: images-tools
    - name: Download ${{ matrix.server }} Docker image
      uses: actions/download-artifact@v3
      with:
        name: image-${{ matrix.server }}
    - name: Download ${{ matrix.client }} Docker image
      if: ${{ matrix.server != matrix.client }}
      uses: actions/download-artifact@v3
      with:
        name: image-${{ matrix.client }}
    - name: Load docker images
      run: |
        docker load --input quic-network-simulator.tar.gz
        docker load --input quic-interop-iperf-endpoint.tar.gz
        docker load --input ${{ matrix.server }}.tar.gz
        docker load --input ${{ matrix.client }}.tar.gz
      shell: bash
    - run: docker image ls
      shell: bash
    - name: Download Wireshark
      uses: actions/download-artifact@v3
      with:
        name: wireshark
        path: wireshark
    - name: Install Wireshark
      run: |
        cd wireshark
        tar xfz tshark.tar.gz
        sudo mv tshark /usr/local/bin
        cd .. && rm -r wireshark
      shell: bash
    - name: Install Python packages
      run: |
        pip install -U pip
        pip install -r requirements.txt
      shell: bash
    - name: Run tests
      env:
        CRON: "true"
      run: |
        (python run.py --client ${{ matrix.client }} --server ${{ matrix.server }} --log-dir logs --json ${{ matrix.server }}_${{ matrix.client }}_results.json -t onlyTests || true) | tee output.txt
        mkdir -p logs/${{ matrix.server }}_${{ matrix.client }}
        mv output.txt logs/${{ matrix.server }}_${{ matrix.client }}/
      shell: bash
